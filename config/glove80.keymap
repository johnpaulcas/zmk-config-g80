/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20
#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 4>, <&to 4>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hrm_l: hrm_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <53 52 69 71 70 54 55 56 57 74 73 72 5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 58 59 60 61 62 63 75 76 77 78 79>;
        };

        hrm_r: hrm_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <52 53 68 69 70 71 54 46 47 64 65 66 67 68 0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 69>;
        };

        repeat_or_layer: repeat_or_layer {
            compatible = "zmk,behavior-tap-dance";
            label = "REPEAT_OR_LAYER";
            #binding-cells = <0>;
            bindings = <&key_repeat>, <&tog 2>;

            tapping-term-ms = <150>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        hyper: hyper {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RC(RS(RA(RGUI)))>;
            label = "HYPER";
        };
    };

    combos {
        compatible = "zmk,combos";

        l_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <29 30>;
        };

        r_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <30 31>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1      &kp F2          &kp F3         &kp F4         &kp F5                                                                                                                                   &kp F6           &kp F7         &kp F8         &kp F9          &kp F10
&kp EQUAL   &kp N1          &kp N2         &kp N3         &kp N4          &kp N5                                                                                                           &kp N6  &kp N7           &kp N8         &kp N9         &kp N0          &kp MINUS
&kp TAB     &kp Q           &kp W          &kp F          &kp P           &kp B                                                                                                            &kp J   &kp L            &kp U          &kp Y          &kp SEMICOLON   &kp BSLH
&kp ESCAPE  &hrm_l LCTRL A  &hrm_l LALT R  &hrm_l LGUI S  &hrm_l LSHFT T  &kp G                                                                                                            &kp M   &hrm_r RSHIFT N  &hrm_r RCMD E  &hrm_r RALT I  &hrm_r RCTRL O  &kp COLON
&kp GRAVE   &kp Z           &kp X          &kp C          &kp D           &kp V   &caps_word       &kp RSHFT         &layer_td  &kp LGUI     &kp RC(SPACE)  &mt RC(RS(RA(RIGHT_GUI))) TAB  &kp K   &kp H            &kp COMMA      &kp DOT        &kp FSLH        &kp PG_UP
&magic 3 0  &kp HOME        &kp END        &kp LEFT       &kp RIGHT               &lt 2 BACKSPACE  &repeat_or_layer  &kp COMMA  &key_repeat  &kp RET        &lt 1 SPACE                            &kp DOWN_ARROW   &kp UP_ARROW   &kp LBKT       &kp RBKT        &kp PG_DN
            >;
        };

        symbol {
            bindings = <
&trans      &trans            &trans                &trans                 &trans                                                                                                             &trans         &trans                &trans                 &trans      &trans
&trans      &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp COLON                                                                    &trans             &trans         &trans                &trans                 &trans      &trans
&kp PERIOD  &kp EXCLAMATION   &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp SEMICOLON      &kp QUESTION                                                                 &kp GRAVE          &sk RSHFT      &sk RIGHT_GUI         &sk RIGHT_ALT          &sk RCTRL   &trans
&kp HASH    &kp CARET         &kp EQUAL             &kp UNDERSCORE         &kp DOLLAR         &kp ASTERISK                                                                 &kp DOUBLE_QUOTES  &kp PIPE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp QMARK   &trans
&kp TILDE   &kp LESS_THAN     &kp PIPE              &kp MINUS              &kp GREATER_THAN   &kp SLASH     &kp BACKSLASH  &kp DOT    &trans       &trans  &trans  &trans  &kp SINGLE_QUOTE   &kp AMPERSAND  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp ESCAPE  &trans
&trans      &kp AMPERSAND     &kp SINGLE_QUOTE      &kp DOUBLE_QUOTES      &kp PLUS                         &kp PERCENT    &kp COLON  &kp AT_SIGN  &trans  &trans  &trans                     &trans         &trans                &trans                 &trans      &trans
            >;
        };

        nav {
            bindings = <
&trans  &trans        &trans        &trans             &trans                                                                                               &trans        &trans        &trans         &trans        &trans
&trans  &trans        &trans        &trans             &trans        &trans                                                                   &trans        &trans        &trans        &trans         &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3       &kp NUMBER_4  &kp NUMBER_5                                                             &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9   &kp NUMBER_0  &trans
&trans  &trans        &trans        &kp DOUBLE_QUOTES  &kp PERCENT   &kp LEFT_BRACKET                                                         &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT      &kp RCTRL     &trans
&trans  &trans        &trans        &trans             &trans        &trans            &trans  &trans  &trans  &trans  &trans   &trans        &trans        &trans        &trans        &kp RC(SPACE)  &trans        &trans
&trans  &trans        &trans        &kp UNDERSCORE     &kp EQUAL                       &trans  &tog 0  &trans  &trans  &kp DOT  &kp NUMBER_0                &kp MINUS     &kp PLUS      &trans         &trans        &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                         &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none      &kp HOME                                                   &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none      &kp END                                                    &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                  &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &trans  &trans  &trans  &trans  &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        number {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                                      &trans        &trans        &trans        &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                               &trans         &trans        &trans        &trans        &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                               &kp BACKSPACE  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp COLON  &kp PERCENT
&trans  &trans  &trans  &trans  &trans  &trans                                                               &kp K          &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS  &kp PLUS
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp PERCENT  &kp ASTERISK  &kp PLUS  &kp J          &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH  &kp ASTERISK
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &kp EQUAL    &kp PERIOD    &kp N0                   &trans        &trans        &trans        &trans     &trans
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                                      &trans          &trans        &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                             &trans           &trans          &trans        &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                             &none            &none           &none         &none            &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                             &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &kp RG(K_COPY)  &kp RG(K_PASTE)  &none           &none         &none            &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &mkp RCLK  &mkp LCLK                        &msc SCRL_DOWN  &msc SCRL_UP  &trans           &trans  &trans
            >;
        };
    };
};
